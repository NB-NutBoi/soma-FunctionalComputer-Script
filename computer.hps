
#include "helpers/helper_imgui.hps"

class FunctionalComputer
{
	/*---------------------------------------------------
	--------------------VARIABLES------------------------
	---------------------------------------------------*/
	
	
	
	
	//Main data class
	ComputerData data;
	bool waitForMouseMovementBeforeInput = true;
	tString soundModule;
	bool hasSoundModule = false;
	
	[volatile]array<Click@> clicks;
	
	
	/*------------------------------------------------------
	--------------------CONSTRUCTORS------------------------
	------------------------------------------------------*/
	
	
	
	
	FunctionalComputer(ComputerData defaultData){
		data = defaultData;
		
		Desktop d = Desktop("Desktop");
		data.desktop = d;
		data.applications.push_back(@d);
		data.currentFocusedApplication.push_back(@d);
	}
	
	FunctionalComputer()
	{
		data = ComputerData();
		
		Desktop d = Desktop("Desktop");
		data.desktop = d;
		data.applications.push_back(@d);
		data.currentFocusedApplication.push_back(@d);
	}
	
	
	
	
	/*----------------------------------------------
	--------------------MISC------------------------
	----------------------------------------------*/
	
	
	
	
	void updateTrackMouse(bool track){
		waitForMouseMovementBeforeInput = true;
		data.doMouseCalculations = track;
	}
	
	void SetSoundModule(tString asEntity){
		hasSoundModule = true;
		soundModule = asEntity;
	}
	
	
	
	
	/*----------------------------------------------
	-----------ADDDDING/REMOVING DATA---------------
	----------------------------------------------*/
	
	void AddFile(const ComputerFile file){
		data.files.push_back(file);
	}
	
	void AddApp(Application@ app){
		cLux_AddDebugMessage(app.name +" added.");
		data.applications.push_back(app);
		cLux_AddDebugMessage(data.applications.length +" apps active after add.");
	}
	
	void RemoveApp(Application@ app){
		cLux_AddDebugMessage(app.name +" removed.");
		data.applications.removeAt(data.applications.find(app));
		cLux_AddDebugMessage(data.applications.length +" apps active after remove.");
	}
	
	/*
	--------------------CLICKS------------------------
	*/
	
	void AddClick(Click@ click){
		clicks.push_back(click);
	}
	
	void RemoveClick(int index){
		clicks.removeAt(index);
	}
	
	bool CheckClickExists(tString click){
		for(int i = 0; i < int(clicks.length); ++i)
		{	
	
			if(clicks[i].input == click){
				return true;
			}
		}
		
		return false;
	}
	
	/*-------------------------------------------------
	---------------DRAWING / UPDATING------------------
	-------------------------------------------------*/
	
	
	
	
	cColor DrawComputer(float afTimeStep){
		
		cColor returncolor = cColor_Blue;
		
		/*
		--------------------MOUSE------------------------
		*/
		
		if(data.doMouseCalculations){
			if(waitForMouseMovementBeforeInput && ImGui_CheckMouseHasMoved()){
				waitForMouseMovementBeforeInput = false;
			}
			//sprite.framePixels.getPixel32(Std.int((FlxG.mouse.x - sprite.x) * (sprite.framePixels.width / sprite.width)),Std.int((FlxG.mouse.y - sprite.y) * (sprite.framePixels.height / sprite.height)))
			
			data.mousePos = cVector2f(float(cInput_GetMouse().GetAbsPosition().x)*(data.computerDimentions.x / 1920),float(cInput_GetMouse().GetAbsPosition().y)*(data.computerDimentions.y / 1080));
			
			//cLux_AddDebugMessage(ImGui_GetMouseRel() +" relative mouse position");
			
			if(data.mousePos.x != -100 && data.mousePos.y != -100){
				
				if( data.mousePos.x > data.computerDimentions.x ){
					data.mousePos.x = data.computerDimentions.x;
				}
				
				if( data.mousePos.x < 0 ){
					data.mousePos.x = 0;
				}
				
				if( data.mousePos.y < 0 ){
					data.mousePos.y = 0;
				}
				
				if( data.mousePos.y > data.computerDimentions.y){
					data.mousePos.y = data.computerDimentions.y;
				}
				data.mouseRelMove = data.mousePos - data.prevMousePos;
				//cLux_AddDebugMessage("moved "+data.mouseRelMove);
				data.prevMousePos = data.mousePos;
			}
			else{
				data.mousePos = data.prevMousePos;
			}
			
			//cLux_AddDebugMessage(mousePos +" absolute mouse position");
		}
		
		/*
		--------------------CLICKS------------------------
		*/
		
		if(data.doMouseCalculations && !waitForMouseMovementBeforeInput){
			if(ImGui_ActionTriggered(eImGuiAction_MouseLeft)){
				//Clicked somewhere
				
				
				
				cLux_AddDebugMessage("click," + int(data.applications.length) + " apps active. (including desktop)");
				if(data.currentFocusedApplication[0].renderWindow){
					data.currentFocusedApplication[0].window[0].focused = false;
				}
				
				for(int i = data.applications.length-1; -1 < i; --i)
				{	
					//cLux_AddDebugMessage(i+ " index");
					
					if(i == 0){
						data.SetCurrentFocusedApplication(@data.desktop);
						cLux_AddDebugMessage("Set focused app to desktop.");
						break;
					}
					
					Application@ obj = @data.applications[i];
					if(obj.window[0].MouseOverlaps(data.mousePos,@data)){
						data.SetCurrentFocusedApplication(@obj);
						
						if(obj.renderWindow){
							obj.window[0].focused = true;
						}
						
						cLux_AddDebugMessage("Set focused app to "+obj.name);
						break;
					}
					
					continue;
				}
			}
			
			if(ImGui_ActionIsDown(eImGuiAction_MouseLeft)){
				data.holdingLmb = true;
				//cLux_AddDebugMessage("hold");
			}
			else{
				data.holdingLmb = false;
			}
			
			if(ImGui_ActionIsDown(eImGuiAction_MouseRight)){
				data.holdingRmb = true;
				//cLux_AddDebugMessage("hold");
			}
			else{
				data.holdingRmb = false;
			}
		}
		
		for(int i = 0; i < int(clicks.length); ++i)
		{	
			Click@ c = clicks[i];
			if(c.time <= 0){
				cLux_AddDebugMessage("Removed click "+c.input);
				RemoveClick(i);
				cLux_AddDebugMessage(clicks.length+" clicks remaining.");
			}
			else{
				c.UpdateTime(afTimeStep);
			}
		}
		
		/*
		--------------------SCREENSAVER------------------------
		*/
		
		cImGuiGfx desktopWallpaper(data.screensaver+".dds", eImGuiGfx_Texture);
		ImGui_DoImage(desktopWallpaper, cVector3f(0,0,0), cVector2f(data.computerDimentions.x,data.computerDimentions.y));
		
		/*
		--------------------APPS------------------------
		*/
		
		//cLux_AddDebugMessage(data.applications.length+" apps active");
		
		for(int i = 0; i < int(data.applications.length); ++i)
		{	
			//app space (other than desktop) is always 10 and up
			UpdateApp(data.applications[i], afTimeStep, 10+i);
		}
		
		
		
		cImGuiGfx cursor(data.mouse+".dds", eImGuiGfx_Texture);
		ImGui_DoImage(cursor, cVector3f(data.mousePos.x,data.mousePos.y,999), cVector2f(13,20));
		
		return returncolor;
	}
	
	
	
	
	/*-----------------------------------------------
	--------------------LOGIC------------------------
	-----------------------------------------------*/
	
	
	
	
	void UpdateApp(Application@ obj, float afTimeStep, int index){
		obj.Update(afTimeStep,@data,@this);
		obj.Draw(index,@data,@this);
	}
}


/*-----------------------------------------------
---------------------DATA------------------------
-----------------------------------------------*/



class Click
{
	float time;
	tString input;
	
	Click(){time = 0.5f; input = "NONE";}
	Click(float timerTime, tString inputName){time = timerTime; input = inputName;}
	
	void UpdateTime(float afTimeStep){time -= afTimeStep;}
}

class ComputerData
{
	bool largeIcons = true;
	
	
	//not meant to be modified directly
	bool doMouseCalculations = false;
	
	bool holdingLmb = false;
	bool holdingRmb = false;
	 
	cVector2f mousePos(0,0);
	cVector2f mouseRelMove(0,0);
	cVector2f prevMousePos(0,0);
	 
	cVector2f computerDimentions;
	
	cVector2f stretchedOffset;
	 
	Desktop desktop;
	[volatile]array<Application@> currentFocusedApplication;
	
	//thanks to crater for helping me with this
	[volatile]array<Application@> applications;
	array<ComputerFile> files;
	
	tString screensaver;
	tString mouse;
	
	//FunctionalComputer cpu;(-22,0)
	
	ComputerData(cVector2f dimentions, tString backround, tString mouseTexture){
		computerDimentions = dimentions;
		screensaver = backround;
		mouse = mouseTexture;
		
		stretchedOffset = cVector2f(0,0);
	}
	
	ComputerData(cVector2f dimentions, tString backround, tString mouseTexture, cVector2f stretchedOffsetFix){
		computerDimentions = dimentions;
		screensaver = backround;
		mouse = mouseTexture;
		
		stretchedOffset = stretchedOffsetFix;
	}
	
	ComputerData(){
		computerDimentions = cVector2f(520,525);
		screensaver = "background1";
		mouse = "cursor_test";
	}
	
	void SetCurrentFocusedApplication(Application@ app){
		currentFocusedApplication.insertAt(0,@app);
	}
}




/*-----------------------------------------------
--------------------WINDOW-----------------------
-----------------------------------------------*/




class ComputerWindow{
	
	[volatile]array<ComputerWindowData@> windowData;
	
	//internal value;
	bool focused = false;
	bool dragging = true;
	
	tString windowName = "";
	
	ComputerWindow(ComputerWindowData windowData, tString name){
		this.windowData.push_back(windowData);
		windowName = name;
	}
	
	ComputerWindow(){
		windowData.push_back(ComputerWindowData(cVector2f(100,100),cVector2f(0,0)));
	}
	
	bool MouseOverlaps(cVector2f mouse, ComputerData@ data){
		return cMath_CheckPointInRectIntersection(mouse,cRect2f(windowData[0].position.x-2,windowData[0].position.y-16.5,(windowData[0].window_size.x*data.stretchedOffset.x)+4,(windowData[0].window_size.y*data.stretchedOffset.y)+16.5));
	}
	
	bool MouseOverlapsWindowTaskbar(cVector2f mouse, ComputerData@ data){
		return cMath_CheckPointInRectIntersection(mouse,cRect2f(windowData[0].position.x-2,windowData[0].position.y-16.5,(windowData[0].window_size.x*data.stretchedOffset.x)+4,(16.5*data.stretchedOffset.y)));
	}
	
	void Update(float time, ComputerData@ data, FunctionalComputer@ cpu){
		//cLux_AddDebugMessage("window update.");
		if(ImGui_ActionTriggered(eImGuiAction_MouseLeft) && MouseOverlapsWindowTaskbar(data.mousePos,@data) && focused && !dragging){
			//cLux_AddDebugMessage("window drag.");
			dragging = true;
		}
		
		//prevents dragging from stopping by the mouse updating faster than the terminal
		if(dragging){
			if(!data.holdingLmb){
				dragging = false;
			}
			windowData[0].position += data.mouseRelMove;
		}
	}
	
	void Draw(int index, ComputerData@ data, FunctionalComputer@ cpu){
		
		//window backround
		ImGui_DrawReadableBackground(cVector3f(windowData[0].position.x-2,windowData[0].position.y-16.5,index),(windowData[0].window_size*data.stretchedOffset)+cVector2f(4,19.5),1);
		ImGui_DoLabel(windowName,cVector3f(windowData[0].position.x,windowData[0].position.y-16.5,index));
		//actual window-space
		if(focused){
			ImGui_DrawReadableBackground(cVector3f(windowData[0].position.x,windowData[0].position.y,index),windowData[0].window_size*data.stretchedOffset,1);
		}
	}
}

class ComputerWindowData{
	
	cVector2f window_size;
	cVector2f start_pos;
	
	cVector2f position;
	
	bool AllowClose = true;
	bool AllowMaximize = false;
	bool AllowMinimize = false;
	
	ComputerWindowData(cVector2f window_size,cVector2f start_pos){
		this.window_size = window_size;
		this.start_pos = start_pos;
		position = start_pos;
	}
	
	ComputerWindowData(){
		window_size = cVector2f(100,100);
		start_pos = cVector2f(0,0);
	}
}




/*-----------------------------------------------
---------------------FILE------------------------
-----------------------------------------------*/



class ComputerFile
{
	//iComputerFileDataInterface data;
	
	tString name;
	tString appType;
	
	cVector2f index;
	
	[volatile]bool selected = false;
	
	[volatile]array<Application@> onOpen;
	
	ComputerFile(cVector2f index, tString name, tString appType, Application onOpen){
		this.index = index;
		this.name = name;
		this.appType = appType;
		this.onOpen.push_back(@onOpen);
	}
	
	ComputerFile(){
		name = "unnamed file";
		index = cVector2f(0,0);
		appType = "text";
		onOpen.push_back(@TextReader("unnamed file - Text reader",AppTextContent("incorrectly made file.")));
	}
}



/*-----------------------------------------------
------------------APPLICATION--------------------
-----------------------------------------------*/



class Application
{
	tString name;
	tString appType;
	
	[volatile]array<ComputerWindow@> window;
	
	bool renderWindow;
	bool forceFocus;
	
	Application(tString name, tString appType){
		this.name = name;
		this.appType = appType;
		
		renderWindow = false;
		forceFocus = false;
	}
	
	Application(){
		name = "unnamed application";
		appType = "file";
		
		renderWindow = false;
		forceFocus = false;
	}
	
	// Implement the copy constructor
	
	Application(Application@ &in other)
    {
		name = other.name;
		appType = other.appType;
		
		window = other.window;
		
		renderWindow = other.renderWindow;
		forceFocus = other.forceFocus;
    }
	
	Application@ clone(){
		Application r(name,appType);
		r.renderWindow = renderWindow;
		r.forceFocus = forceFocus;
		return @r;
	}
	
	void Update(float time, ComputerData@ data, FunctionalComputer@ cpu){
		if(renderWindow){
			window[0].Update(time,data,cpu);
		}
	}
	void Draw(int index, ComputerData@ data, FunctionalComputer@ cpu){
		if(renderWindow){
			window[0].Draw(index,data,cpu);
		}
	}
	
	void OpenWindow(ComputerData@ data, FunctionalComputer@ cpu){}
	void CloseWindow(ComputerData@ data, FunctionalComputer@ cpu){}
}


/*-----------------------------------------------
--------STANDARD APPLICATION STRUCTURE-----------
-----------------------------------------------*/

class AppTextContent
{
	tString text;
	
	AppTextContent(tString text){
		this.text = text;
	}
	
	AppTextContent(){
		text = "";
	}
}

/*-----------------------------------------------
---------------STANDARD APPLICATIONS-------------
-----------------------------------------------*/



/*
------------------TEXT READER--------------------
*/

class TextReader : Application
{
	AppTextContent content;
	TextReader(const tString windowName, const AppTextContent appContent){
		super(windowName,"text");
		apptest = 0;
		
		content = appContent;
		
		renderWindow = true;
	}
	
	TextReader(){
		super("Unnamed Text Reader","text");
		apptest = 0;
		
		content = AppTextContent();
		
		renderWindow = true;
	}
	
	TextReader(const TextReader &in other)
    {
		super(other.name,other.appType);
		apptest = other.apptest;
		
		content = other.content;
		
		renderWindow = true;
    }
	
	int apptest;
	
	//void iComputerFileDataInterface(){};
	
	void Update(float time, ComputerData@ data, FunctionalComputer@ cpu) override
	{
		//cLux_AddDebugMessage("yaay");
		Application::Update(time,data,cpu);
	}
	
	void Draw(int index, ComputerData@ data, FunctionalComputer@ cpu) override
	{
		Application::Draw(index,data,cpu);
		
		ImGui_DoLabel(content.text,cVector3f(window[0].windowData[0].position.x,window[0].windowData[0].position.y,index));
	}
	
	void OpenWindow(ComputerData@ data, FunctionalComputer@ cpu) override
	{
		data.SetCurrentFocusedApplication(@this);
		window.push_back(ComputerWindow(ComputerWindowData(cVector2f(200,200),cVector2f(100,120)),name));
		ComputerWindow@ w = @window[0];
		w.focused = true;
		cLux_AddDebugMessage("open text editor");
		cpu.AddApp(@this);
	}
	
	void CloseWindow(ComputerData@ data, FunctionalComputer@ cpu) override
	{
		window[0].focused = false;
		data.SetCurrentFocusedApplication(data.applications[0]);
		cLux_AddDebugMessage("close text editor");
		cpu.RemoveApp(@this);
		window.removeAt(0);
	}
	
	//clone function (really important)
	Application@ clone() override
	{
		TextReader r(name,content);
		r.renderWindow = renderWindow;
		r.forceFocus = forceFocus;
		return @r;
	}
}

/*
------------------DESKTOP--------------------
*/

//i don't recommend messing with this one, it doesn't work the same as the other applications.
class Desktop : Application
{
	[volatile]tString selected = "";
	
	Desktop(const tString windowName){
		super(windowName,"file");
		apptest = 1;
	}
	
	Desktop(){
		super("Unnamed Desktop","file");
		apptest = 1;
	}
	
	Desktop(const Desktop &in other)
    {
		super(other.name,other.appType);
		apptest = other.apptest;
    }
	
	int apptest;
	
	//void iComputerFileDataInterface(){};
	
	void Update(float time, ComputerData@ data, FunctionalComputer@ cpu) override
	{
		//cLux_AddDebugMessage(" hi from desktop");
	}
	
	void Draw(int index, ComputerData@ data, FunctionalComputer@ cpu) override
	{		
		/* 
		ICONS
		*/
		
		//cLux_AddDebugMessage(" hi from desktop");
		
		for(int i = 0; i < int(data.files.length); ++i)
		{
			ComputerFile file = data.files[i];
			DrawIcon(file,data,cpu);
			
		}
		
		// taskbar
		ImGui_DrawReadableBackground(cVector3f(0,data.computerDimentions.y - 50,3),cVector2f(data.computerDimentions.x,50),0.65f);
		ImGui_DoLabel("ShitOS V1.2",cVector3f(5,data.computerDimentions.y - 35,4));
		
		for(int i = 1; i < int(data.applications.length); ++i)
		{	
			Application@ app = @data.applications[i];
			cImGuiGfx taskbarIcon = GetIcon(app.appType,false,@data);
			cVector3f pos(0 + 60 + (20*i),data.computerDimentions.y - 47,4);
			cVector2f size(30 * data.stretchedOffset.x, 30* data.stretchedOffset.y);
			ImGui_DoImage(taskbarIcon, pos, size);
			
			if(app.window[0].focused){
				ImGui_DrawReadableBackground(pos+cVector3f(0,0,-0.5),size,0.85f);
			}
		}
	}
	
	
	//DRAW ICONS
	
	void DrawIcon(ComputerFile file, ComputerData@ data, FunctionalComputer@ cpu)
	{
		cVector2f index = file.index;
		tString name = file.name;
		tString appType = file.appType;
		
		/*
		--------------------ICON------------------------
		*/
		if(data.largeIcons){
			index.y = cMath_Clamp(index.y, 0, 3);
			index.x = cMath_Clamp(index.x, 0, 5);
		}
		
		cImGuiGfx icon = GetIcon(appType,false,@data);
		
		/*
		--------------------SIZE------------------------
		*/
		
		cVector2f size(80,80);
		float mul = 80;
		
		if(data.largeIcons){
			size = cVector2f(80,80) * data.stretchedOffset;
			mul = 80;
		}
		else{
			size = cVector2f(40,40) * data.stretchedOffset;
			mul = 40;
		}
		
		/*
		--------------------POSITION------------------------
		*/
		
		//default layer for desktop icons is always 2
		
		cVector3f position((index.x * mul), ((index.y * mul) + (40*index.y)), 2);
		
		/*
		--------------------DRAW------------------------
		*/
		
		int chars =	cString_GetLastStringPos(name,cString_GetLastChar(name))+1;
		
		float xOffset = GetNameOffset(chars,size.x);
		//cLux_AddDebugMessage(chars +" chars");
		
		if(chars > 8){
			name = cString_Sub(name, 0, 8) + "...";
			xOffset = size.x*0.5;
		}
		
		ImGui_DoLabel(name,(position + cVector3f(0+xOffset,size.y+5,0)));
		ImGui_DoImage(icon, position, size);
		
		/*
		--------------------SELECT ICON------------------------
		*/
		
		//cLux_AddDebugMessage(data.currentFocusedApplication[0].name);
		
		if(data.currentFocusedApplication[0].name == "Desktop"){
			
			//do visual first
			bool overlaps = false;
			bool curSelected = false;
			
			if(selected == name){
				curSelected = true;
			}
			
			if(cMath_CheckPointInRectIntersection(data.mousePos,cRect2f(position.x,position.y,size.x,size.y))){
				overlaps = true;
			}
			
			if(overlaps || curSelected){
				ImGui_DrawReadableBackground(position - cVector3f(0,0,1),size,0.45f);
			}
			
			//then deal with input
			
			if(data.doMouseCalculations && !cpu.waitForMouseMovementBeforeInput){
				if(ImGui_ActionTriggered(eImGuiAction_MouseLeft) && overlaps){
					selected = name;
					
					if(!cpu.CheckClickExists(name)){
						cpu.AddClick(Click(0.25f,name));
					}
					else{
						selected = "";
						//duplicate app
						file.onOpen[0].clone().OpenWindow(@data,@cpu);
					}
					/*
					file.onOpen[0].OpenWindow(data,cpu);
					cLux_AddDebugMessage("click on "+name+".   app "+file.onOpen[0].name);*/
				}
				else if(ImGui_ActionTriggered(eImGuiAction_MouseLeft) && curSelected){
					selected = "";
					
				}
			}
		}
		
	}
	
	cImGuiGfx GetIcon(tString appType, bool forceSmallIcons, ComputerData@ data){
		
		cImGuiGfx icon("iconLarge_File.dds", eImGuiGfx_Texture);
		
		if(appType == "file"){
			if(data.largeIcons && !forceSmallIcons){
				icon = cImGuiGfx("iconLarge_File.dds", eImGuiGfx_Texture);
			}
		}
		else if(appType == "text"){
			if(data.largeIcons && !forceSmallIcons){
				icon = cImGuiGfx("iconLarge_TextFile.dds", eImGuiGfx_Texture);
			}
		}
		else if(appType == "exe"){
			if(data.largeIcons && !forceSmallIcons){
				icon = cImGuiGfx("iconLarge_Executable.dds", eImGuiGfx_Texture);
			}
		}
		else if(appType == "image"){
			if(data.largeIcons && !forceSmallIcons){
				icon = cImGuiGfx("iconLarge_Image.dds", eImGuiGfx_Texture);
			}
		}
		else if(appType == "internet"){
			if(data.largeIcons && !forceSmallIcons){
				icon = cImGuiGfx("iconLarge_Globe.dds", eImGuiGfx_Texture);
			}
		}
		else{
			if(data.largeIcons && !forceSmallIcons){
				icon = cImGuiGfx("iconLarge_"+appType+".dds", eImGuiGfx_Texture);
			}
		}
		
		return icon;
	}
	
	//this code fucking sucks but it's only an approximation til i can find a better way to do names
	float GetNameOffset(int chars,float ogWidth){
		//8 chars is good for default size
		float mul = float(chars) / 8;
		mul = 1-mul;
		
		//cLux_AddDebugMessage(chars + " chars, "+ mul +" mul, " + ogWidth+ " width, " + ogWidth*mul + " result.");
		
		return ((ogWidth*0.5)*mul) + (float(chars) * mul);
	}
}